<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.30 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-kuehlewind-quic-appman-00" category="info">

  <front>
    <title>Applicability and Management of the QUIC Transport Protocol</title>

    <author initials="M." surname="Kuehlewind" fullname="Mirja Kuehlewind">
      <organization>ETH Zurich</organization>
      <address>
        <postal>
          <street>Gloriastrasse 35</street>
          <city>8092 Zurich</city>
          <country>Switzerland</country>
        </postal>
        <email>mirja.kuehlewind@tik.ee.ethz.ch</email>
      </address>
    </author>
    <author initials="B." surname="Trammell" fullname="Brian Trammell">
      <organization>ETH Zurich</organization>
      <address>
        <postal>
          <street>Gloriastrasse 35</street>
          <city>8092 Zurich</city>
          <country>Switzerland</country>
        </postal>
        <email>ietf@trammell.ch</email>
      </address>
    </author>

    <date year="2017" month="January" day="11"/>

    
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document discusses the applicability and manageability of the QUIC
transport protocol, focusing on caveats impacting application protocol
development and deployment over QUIC, and network operations involving QUIC
traffic.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>QUIC <xref target="I-D.ietf-quic-transport"/> is a new transport protocol currently under
development in the IETF quic working group, focusing on support of semantics
as needed for HTTP/2 <xref target="I-D.ietf-quic-http"/> such as stream-multiplexing to
avoid head-of-line blocking. Based on current deployment practices, QUIC is
encapsulated in UDP and encrypted by default. This means the version of QUIC
that is currently under development will integrate TLS 1.3 
<xref target="I-D.ietf-quic-tls"/> to encrypt all payload data including all header 
information needed for
for stream-multiplexing and most on the  other header information. Given QUIC
is an end-to-end transport protocol, all information in the protocol header
is not meant to be mutable by the network, and will therefore be integrity-
protected to the extent possible.</t>

<t>This document serves two purposes:</t>

<t><list style="numbers">
  <t>It provides guidance for application developers that want to use the QUIC
protocol without implementing it on their own. This includes general guidance
for application use of HTTP/2 over QUIC as well as the use of other
application layer protocols over QUIC. For specific guidance on how to
integrate HTTP/2 with QUIC, see <xref target="I-D.ietf-quic-http"/>.</t>
  <t>It provides guidance for network operation and management of QUIC traffic.
This includes guidance on how to interpret and utilize information that is
exposed by QUIC to the network as well as explaining requirement and
assumption that the QUIC protocol design takes toward the expected network
treatment.</t>
</list></t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The words “MUST”, “MUST NOT”, “SHOULD”, and “MAY” are used in this
   document.  It’s not shouting; when they are capitalized, they have
   the special meaning defined in <xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="applicability-of-quic" title="Applicability of QUIC">

<t>In the following subsections we discuss specific caveats to QUIC’s
applicability, and issues that application developers must consider when using
QUIC as a transport for their application.</t>

<section anchor="the-necessity-of-tcp-fallback" title="The Necessity of TCP Fallback">

<t>QUIC uses UDP as a substrate for userspace implementation and port numbers for
NAT and middlebox traversal. While there is no evidence of widespread,
systematic disadvantage of UDP traffic compared to TCP in the Internet
<xref target="Edeline16"/>, somewhere between three <xref target="Trammell16"/> and five <xref target="Swett16"/>
percent of networks simply block UDP traffic. All applications running on top
of QUIC must therefore either be prepared to accept connectivity failure on
such networks, or be engineered to fall back to TLS, or TLS-equivalent crypto,
over TCP. These applications must operate, perhaps with impaired
functionality, in the absence of features provided by QUIC not present in TLS
over TCP:  The most obvious difference is that TCP does not stream
multiplexing and there stream multiplex would need to be implemented in the
application layer if needed. Further, TCP by default does not support 0-RTT
session resumption. TCP Fast Open can be used but might no be supported by the
far end or could be blocked on the network path. Note that there is at least
evidence of middleboxes blocking SYN data even if TFO was successfully
negotiated. Moreover, while encryption (in this case TLS) is inseparable
integrated with QUIC, TLS negotiation over TCP can be blocked. In case it is
RECOMMENDED to abort the connection.</t>

<t>We hope that the deployment of a proposed standard version of the QUIC
protocol will provide an incentive for these networks to permit QUIC traffic.
Indeed, the ability to treat QUIC traffic statefully as in <xref target="statefulness"/>
removes one network management incentive to block this traffic.</t>

</section>
<section anchor="zero-rtt" title="Zero RTT: Here There Be Dragons">

<t>QUIC provides for 0-RTT connection establishment (see section 3.2 of 
<xref target="I-D.ietf-quic-transport"/>). However, data in the frames contained in the
first packet of a such a connection must be treated specially by the
application layer. Since a retransmission of these frames resulting from a
lost acknowledgment may cause the data to appear twice, either the
application- layer protocol has to be designed such that all such data is
treated as idempotent, or there must be some application-layer mechanism for
recognizing spuriously retransmitted frame and dropping them.</t>

<t>[EDITOR’S NOTE: discuss defenses against replay attacks using 0-RTT data.]</t>

</section>
<section anchor="stream-versus-flow-multiplexing" title="Stream versus Flow Multiplexing">

<t>QUIC’s stream multiplexing feature allows applications to run multiple streams
over a single connection, without head-of-line blocking between streams,
associated at a point in time with a single five-tuple. Streams are
meaningful only to the application; since stream information is carried inside
QUIC’s encryption boundary, no information about the stream(s) whose frames
are carried by a given packet is visible to the network.</t>

<t>Stream multiplexing is not intended to be used for differentiating streams in
terms of network treatment. Application traffic requiring different network
treatment should therefore be carried over different five-tuples (i.e.
multiple QUIC connections). Given QUIC’s ability to send application data on
the first packet of a connection (if a previous connection to the same host
has been successfully established to provide the respective credentials), the
cost for establishing another connection are extremely low.</t>

<t>[EDITOR’S NOTE: For discussion: If establishing a new connection does not seem to
be sufficient, the protocol’s rebinding functionality (see section 3.7 of
<xref target="I-D.ietf-quic-transport"/>) could be extended to allow multiple five-tuples
to share a connection ID simultaneously, instead of sequentially.]</t>

</section>
</section>
<section anchor="manageability-of-quic" title="Manageability of QUIC">

<t>This section discusses those aspects of the QUIC transport protocol that have
an impact on the design and operation of devices that forward QUIC packets.
This section is concerned primarily with QUIC’s unencrypted wire image, which
we define as the information available in the packet header in each QUIC
packet, and the dynamics of that information.</t>

<t>QUIC is a versioned protocol. Everything about the header format can change
except the mechanism by which a receiver can determine whether and where a
version number is present, and the meaning of the version number field itself.</t>

<t>The rest of this document is concerned with the public header structure of the
version of the QUIC transport document that is current as of this writing.</t>

<section anchor="public-header" title="QUIC Public Header Structure">

<t>In the current version of the QUIC protocol, the following information are optionally exposed in the QUIC header:</t>

<t><list style="symbols">
  <t>flags: All QUIC packets have one byte of flags at the beginning of their header. The definition of these flags can change with the version of QUIC, expect for the version flag that indicated that the version number is present in the QUIC header. Other bits of the flag field in the current version of QUIC are the connection ID flag, the packet number size field, the public reset flag, and the key phase flag.</t>
  <t>version number: The version number is present if the version bit in the flags field is set. The version flag is always set in the first packet of a connection but could also be set in other packets.</t>
  <t>connection ID: The connection ID is present if the connection ID bit in the flag field is set. The connection ID flag is always set on the first packet of a connection and can be set on others. Further the connection ID flag is always set when the public reset bit is set as well. QUIC connections are resistant to IP address changes. Therefore if exposed, the same connection ID can occur in QUIC packet with different 5-tuples, indicating that this QUIC packet belongs to the same connection.</t>
  <t>packet number: The packet number is variable length as indicated by packet number size field. If the length is indicated as zero the packet number is not present. If the public reset flag is set, the packet number cannot be present.</t>
  <t>diversification nonce [EDITOR’S NOTE: talk about this once it’s clear what it will be…]</t>
</list></t>

</section>
<section anchor="wire-integrity" title="Integrity Protection of the Wire Image">

<t>All information in the QUIC header, even if exposed to the network, is
integrity protected, therefore a device on the network path MUST not change
these information. Altering of header information would fail any integrity
check, leading to packet drop at the receiver.</t>

</section>
<section anchor="rebinding" title="Connection ID and Rebinding">

<t>A flow might change one of its IP addresses but keep the same connection ID,
as discussed in <xref target="public-header"/>. [EDITOR’S NOTE: What does that mean for the
network, if anything (given the connection ID is only rarely present)?]</t>

</section>
<section anchor="packet-numbers" title="Packet Numbers">

<t>Packet numbers are monotonically increasing. Packets containing
retransmissions as well as packets containing only control information, such
as acknowledgments, will get a new packet numbers. Therefore pure control and
retransmission packets are impossible to distinguish on the wire.</t>

<t>While loss detection in QUIC is still based on packet numbers, congestion
control by default provides richer information than vanilla TCP does.
Especially, QUIC does not rely on duplicated ACKs, making it more tolerant of
packet re-ordering.</t>

</section>
<section anchor="statefulness" title="Stateful Treatment of QUIC Traffic">

<t>Stateful network devices such as firewalls use exposed header information to
support state setup and tear-down. In-line with 
<xref target="I-D.trammell-plus-statefulness"/> (which provides a general model for in-
network state management), the presence of a Connection ID on QUIC traffic can
be used as an association/confirmation signal; QUIC’s public reset may be used
as a partial one-way stop signal.</t>

<t>[EDITOR’S NOTE: note public reset changes for state management may be desirable: two-way stop as in <xref target="I-D.trammell-plus-statefulness"/> has nice properties.]</t>

</section>
<section anchor="measuring-quic-traffic" title="Measuring QUIC Traffic">

<t>Given packet numbers can be expected to be exposed on most packets (expect
public reset but that terminates the connection anyway), packet numbers can be
used by the network to measure loss that occurred between the sender and the
measurement point in the network. Similarly, out-of-order packets
indicate upstream reordering. Unlike with TCP, there is no way to measure
downstream loss and RTT passively.</t>

<t>[EDITOR’S NOTE: the addition of a simple packet number echo would allow passive RTT
measurement and partial passive downstream loss/reordering measurement. Packet
number echo can be sampled at the echo-side (i.e. one-in-N packets or 1/p
packets can carry an echo) for efficiency tradeoff, if necessary.]</t>

<t>[EDITOR’S NOTE: in-network devices can inspect and correlate connection IDs for partial tracking of mobility events.]</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has no actions for IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Especially security- and privacy-relevant applicability and manageability
considerations are given in <xref target="zero-rtt"/>, <xref target="wire-integrity"/>, and <xref target="rebinding"/>.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This work is partially supported by the European Commission under Horizon 2020
grant agreement no. 688421 Measurement and Architecture for a Middleboxed
Internet (MAMI), and by the Swiss State Secretariat for Education, Research,
and Innovation under contract no. 15.0268. This support does not imply
endorsement.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor='RFC2119' target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='I-D.ietf-quic-transport'>
<front>
<title>QUIC: A UDP-Based Multiplexed and Secure Transport</title>

<author initials='J' surname='Iyengar' fullname='Janardhan Iyengar'>
    <organization />
</author>

<author initials='M' surname='Thomson' fullname='Martin Thomson'>
    <organization />
</author>

<date month='November' day='28' year='2016' />

<abstract><t>QUIC is a multiplexed and secure transport protocol that runs on top of UDP.  QUIC builds on past transport experience, and implements mechanisms that make it useful as a modern general-purpose transport protocol.  Using UDP as the basis of QUIC is intended to address compatibility issues with legacy clients and middleboxes.  QUIC authenticates all of its headers, preventing third parties from from changing them.  QUIC encrypts most of its headers, thereby limiting protocol evolution to QUIC endpoints only.  Therefore, middleboxes, in large part, are not required to be updated as new protocol versions are deployed.  This document describes the core QUIC protocol, including the conceptual design, wire format, and mechanisms of the QUIC protocol for connection establishment, stream multiplexing, stream and connection-level flow control, and data reliability.  Accompanying documents describe QUIC's loss recovery and congestion control, and the use of TLS 1.3 for key negotiation.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-quic-transport-00' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-quic-transport-00.txt' />
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='I-D.ietf-quic-tls'>
<front>
<title>Using Transport Layer Security (TLS) to Secure QUIC</title>

<author initials='M' surname='Thomson' fullname='Martin Thomson'>
    <organization />
</author>

<author initials='(' surname='(Unknown)' fullname='(Unknown)'>
    <organization />
</author>

<date month='November' day='28' year='2016' />

<abstract><t>This document describes how Transport Layer Security (TLS) can be used to secure QUIC.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-quic-tls-00' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-quic-tls-00.txt' />
</reference>



<reference anchor='I-D.ietf-quic-http'>
<front>
<title>Hypertext Transfer Protocol (HTTP) over QUIC</title>

<author initials='M' surname='Bishop' fullname='Mike Bishop'>
    <organization />
</author>

<date month='November' day='28' year='2016' />

<abstract><t>The QUIC transport protocol has several features that are desirable in a transport for HTTP/2, such as stream multiplexing, per-stream flow control, and low-latency connection establishment.  This document describes a mapping of HTTP/2 semantics over QUIC. Specifically, this document identifies HTTP/2 features that are subsumed by QUIC, and describes how the other features can be implemented atop QUIC.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-quic-http-00' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-quic-http-00.txt' />
</reference>



<reference anchor='I-D.trammell-plus-statefulness'>
<front>
<title>Transport-Independent Path Layer State Management</title>

<author initials='M' surname='Kuehlewind' fullname='Mirja Kuehlewind'>
    <organization />
</author>

<author initials='B' surname='Trammell' fullname='Brian Trammell'>
    <organization />
</author>

<author initials='J' surname='Hildebrand' fullname='Joe Hildebrand'>
    <organization />
</author>

<date month='December' day='22' year='2016' />

<abstract><t>This document describes a simple state machine for stateful network devices on a path between two endpoints to associate state with traffic traversing them on a per-flow basis, as well as abstract signaling mechanisms for driving the state machine.  This state machine is intended to replace the de-facto use of the TCP state machine or incomplete forms thereof by stateful network devices in a transport-independent way, while still allowing for fast state timeout of non-established or undesirable flows.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-trammell-plus-statefulness-02' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-trammell-plus-statefulness-02.txt' />
</reference>


<reference anchor="Trammell16" >
  <front>
    <title>Internet Path Transparency Measurements using RIPE Atlas (RIPE72 MAT presentation)</title>
    <author initials="B." surname="Trammell">
      <organization></organization>
    </author>
    <author initials="M." surname="Kuehlewind">
      <organization></organization>
    </author>
    <date year="2016" month="May" day="25"/>
  </front>
</reference>
<reference anchor="Edeline16" >
  <front>
    <title>Using UDP for Internet Transport Evolution (arXiv preprint 1612.07816)</title>
    <author initials="K." surname="Edeline">
      <organization></organization>
    </author>
    <author initials="M." surname="Kuehlewind">
      <organization></organization>
    </author>
    <author initials="B." surname="Trammell">
      <organization></organization>
    </author>
    <author initials="E." surname="Aben">
      <organization></organization>
    </author>
    <author initials="B." surname="Donnet">
      <organization></organization>
    </author>
    <date year="2016" month="December" day="22"/>
  </front>
</reference>
<reference anchor="Swett16" >
  <front>
    <title>QUIC Deployment Experience at Google (IETF96 QUIC BoF presentation)</title>
    <author initials="I." surname="Swett">
      <organization></organization>
    </author>
    <date year="2016" month="July" day="20"/>
  </front>
</reference>


    </references>



  </back>
</rfc>

