<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.30 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-kuehlewind-quic-applicability-01" category="info">

  <front>
    <title>Applicability of the QUIC Transport Protocol</title>

    <author initials="M." surname="Kuehlewind" fullname="Mirja Kuehlewind">
      <organization>ETH Zurich</organization>
      <address>
        <postal>
          <street>Gloriastrasse 35</street>
          <city>8092 Zurich</city>
          <country>Switzerland</country>
        </postal>
        <email>mirja.kuehlewind@tik.ee.ethz.ch</email>
      </address>
    </author>
    <author initials="B." surname="Trammell" fullname="Brian Trammell">
      <organization>ETH Zurich</organization>
      <address>
        <postal>
          <street>Gloriastrasse 35</street>
          <city>8092 Zurich</city>
          <country>Switzerland</country>
        </postal>
        <email>ietf@trammell.ch</email>
      </address>
    </author>

    <date year="2017" month="June" day="06"/>

    
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document discusses the applicability of the QUIC transport protocol,
focusing on caveats impacting application protocol development and deployment
over QUIC. Its intended audience is designers of application protocol mappings
to QUIC, and implementors of these application protocols.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>QUIC <xref target="I-D.ietf-quic-transport"/> is a new transport protocol currently under
development in the IETF quic working group, focusing on support of semantics as
needed for HTTP/2 <xref target="I-D.ietf-quic-http"/> such as stream-multiplexing to avoid
head-of-line blocking. Based on current deployment practices, QUIC is
encapsulated in UDP. The version of QUIC
that is currently under development will integrate TLS 1.3 <xref target="I-D.ietf-quic-tls"/>
to encrypt all payload data and most control information.</t>

<t>This document provides guidance for application developers that want to use the QUIC
protocol without implementing it on their own. This includes general guidance
for application use of HTTP/2 over QUIC as well as the use of other
application layer protocols over QUIC. For specific guidance on how to
integrate HTTP/2 with QUIC, see <xref target="I-D.ietf-quic-http"/>.</t>

<t>In the following sections we discuss specific caveats to QUIC’s
applicability, and issues that application developers must consider when using
QUIC as a transport for their application.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The words “MUST”, “MUST NOT”, “SHOULD”, and “MAY” are used in this document.
It’s not shouting; when these words are capitalized, they have a special meaning
as defined in <xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="fallback" title="The Necessity of Fallback">

<t>QUIC uses UDP as a substrate for userspace implementation and port numbers for
NAT and middlebox traversal. While there is no evidence of widespread,
systematic disadvantage of UDP traffic compared to TCP in the Internet
<xref target="Edeline16"/>, somewhere between three <xref target="Trammell16"/> and five <xref target="Swett16"/>
percent of networks simply block UDP traffic. All applications running on top of
QUIC must therefore either be prepared to accept connectivity failure on such
networks, or be engineered to fall back to some other transport protocol. This
fallback SHOULD provide TLS 1.3 or equivalent cryptographic protection, if
available, in order to keep fallback from being exploited as a downgrade attack.
In the case of HTTP, this fallback is TLS 1.3 over TCP.</t>

<t>These applications must operate, perhaps with impaired functionality, in the
absence of features provided by QUIC not present in the fallback protocol. For
fallback to TLS over TCP, the most obvious difference is that TCP does not
provide stream multiplexing and therefore stream multiplexing would need to be
implemented in the application layer if needed. Further, TCP without the TCP
Fast Open extension does not support 0-RTT session resumption. TCP Fast Open can
be requested by the connection initiator but might no be supported by the far
end or could be blocked on the network path. Note that there is some evidence of
middleboxes blocking SYN data even if TFO was successfully negotiated (see
<xref target="PaaschNanog"/>).</t>

<t>Any fallback mechanism is likely to impose a degradation of performance;
however, fallback MUST not silently violate the application’s expectation of
confidentiality or integrity of its payload data.</t>

<t>Moreover, while encryption (in this case TLS) is inseparable integrated with
QUIC, TLS negotiation over TCP can be blocked. In case it is RECOMMENDED to
abort the connection, allowing the application to present a suitable prompt to
the user that secure communication is unavailable.</t>

</section>
<section anchor="zero-rtt" title="Zero RTT: Here There Be Dragons">

<t>QUIC provides for 0-RTT connection establishment (see section 3.2 of
<xref target="I-D.ietf-quic-transport"/>). However, data in the frames contained in 
0-RTT packets of a such a connection must be treated specially by the
application layer. Replay of these packets can cause the data to processed twice.
This is further described in <xref target="I-D.nottingham-httpbis-retry"/>.</t>

<t>Applications that cannot treat data that may appear in a 0-RTT connection
establishment as idempotent MUST NOT use 0-RTT establishment. For this reason the
QUIC transport SHOULD provide an interface for the application to indicate if
0-RTT support is in general desired or a way to indicate if data is idempotent.</t>

</section>
<section anchor="stream-versus-flow-multiplexing" title="Stream versus Flow Multiplexing">

<t>QUIC’s stream multiplexing feature allows applications to run multiple streams
over a single connection, without head-of-line blocking between streams,
associated at a point in time with a single five-tuple. Streams are
meaningful only to the application; since stream information is carried inside
QUIC’s encryption boundary, no information about the stream(s) whose frames
are carried by a given packet is visible to the network.</t>

<t>Stream multiplexing is not intended to be used for differentiating streams in
terms of network treatment. Application traffic requiring different network
treatment SHOULD therefore be carried over different five-tuples (i.e.
multiple QUIC connections). Given QUIC’s ability to send application data in
the first RTT of a connection (if a previous connection to the same host
has been successfully established to provide the respective credentials), the
cost for establishing another connection are extremely low.</t>

</section>
<section anchor="prioritization" title="Prioritization">

<t>Stream prioritization is not exposed to the network, nor to the receiver.
Prioritization can be realized by the sender and the QUIC transport should provide
and interface for applications to prioritize streams <xref target="I-D.ietf-quic-transport"/>.</t>

<t>Priority handling of retransmissions may be implemented by the sender in the transport layer and
<xref target="I-D.ietf-quic-transport"/> does not specify a specific way how this must be
handled. Currently QUIC only provides fully reliable stream transmission, and as such
prioritization of retransmission is likely beneficial. For not fully reliable streams
priority scheduling of retransmissions over data of higher-priority streams might not be
desired. In this case QUIC could also provide an interface or derive the prioritization
decision from the reliability level of the stream.</t>

</section>
<section anchor="graceful-connection-closure" title="Graceful connection closure">

<t>[EDITOR’S NOTE: give some guidance here about the steps an application should take; however this is still work in progress]</t>

</section>
<section anchor="connid" title="Information exposure and the Connection ID">

<t>QUIC exposes some information to the network in the unencrypted part of the
header, either before the encryption context is established, because the
information is intended to be used by the network. QUIC has a long header that
is used during connection establishment and for other control processes, and a
short header that may be used for data transmission in an established
connection. While the long header is fixed and exposes some information, the
short header only exposes the packet number by default and may optionally expose
a connection ID.</t>

<t>Given that exposing this information may make it possible to associate multiple
addresses with a single client during rebinding, which has privacy implications,
an application may indicate to not support exposure of certain information after
the handshake. Specificially, an application that has additional information
that the client is not behind a NAT and the server is not behind a load
balancer, and therefore it is unlikely that the addresses will be re-bound, may
indicate to the transport that is wishes to not expose a connection ID.</t>

<section anchor="server-generated-connection-id" title="Server-Generated Connection ID">

<t>QUIC supports a server-generated Connection ID, transmitted to the client during
connection establishment: see section 5.7 of <xref target="I-D.ietf-quic-transport"/> Servers
behind load balancers should propose a Connection ID during the handshake,
encoding the identity of the server or information about its load balancing
pool, in order to support stateless load balancing. Once the server generates a
Connection ID that encodes its identity, every CDN load balancer would be able
to forward the packets to that server without needing information about every
specific flow it is forwarding.</t>

<t>Server-generated Connection IDs must not encode any information other that that
needed to route packets to the appropriate backend server(s): typically the
identity of the backend server or pool of servers, if the data-center’s load
balancing system keeps “local” state of all flows itself.  Care must be
exercised to ensure that the information encoded in the Connection ID is not
sufficient to identify unique end users. Note that by encoding routing
information in the Connection ID, load balancers open up a new attack vector
that allows bad actors to direct traffic at a specific backend server or pool.
It is therefore recommended that Server-Generated Connection ID includes a
cryptographic MAC that the load balancer pool server are able to identify and
discard packets featuring an invalid MAC.</t>

</section>
</section>
<section anchor="using-server-retry-for-redirection" title="Using Server Retry for Redirection">

<t>QUIC provide a Server Retry packet that can be send by a server in response to
the Client Initial packet. The server may choose a new connection ID in that
packet and the client will retry by sending another Client Initial packet with
the server-selected connection ID. This mechanism can be used to redirect a
connection to a different server, e.g. due to performance reasons or when
servers in a server pool are upgraded gradually, and therefore may support
different versions of QUIC. In this case, it is assumed that all servers
belonging to a certain pool are served in cooperation with load balancers that
forward the traffic based on the connection ID. A server can chose the
connection ID in the Server Retry packet such that the load balancer will
redirect the next Client Initial packet to a different server in that pool.</t>

</section>
<section anchor="use-of-versions-and-cryptographic-handshake" title="Use of Versions and Cryptographic Handshake">

<t>Versioning in QUIC may change the the protocol’s behavior completely, except for
the meaning of a few header fields that have been declared to be fixed. As such
version of QUIC with a higher version number does not necessarily provide a
better service, but might simply provide a very different service, so an
application needs to be able to select which versions of QUIC it wants to use.</t>

<t>A new version could use an encryption scheme other than TLS 1.3 or higher.
<xref target="I-D.ietf-quic-transport"/> specifies requirements for the cryptographic
handshake as currently realized by TLS 1.3 and described in a separate
specification <xref target="I-D.ietf-quic-tls"/>. This split is performed to enable
light-weight versioning with different cryptographic handshakes.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has no actions for IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>See the security considerations in <xref target="I-D.ietf-quic-transport"/> and
<xref target="I-D.ietf-quic-tls"/>; the security considerations for the underlying transport
protocol are relevant for applications using QUIC, as well.</t>

<t>Application developers should note that any fallback they use when QUIC cannot
be used due to network blocking of UDP SHOULD guarantee the same security
properties as QUIC; if this is not possible, the connection SHOULD fail to allow
the application to explicitly handle fallback to a less-secure alternative. See
<xref target="fallback"/>.</t>

</section>
<section anchor="contributors" title="Contributors">

<t>Igor Lubashev contributed text to <xref target="connid"/> on server-selected connection IDs.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This work is partially supported by the European Commission under Horizon 2020
grant agreement no. 688421 Measurement and Architecture for a Middleboxed
Internet (MAMI), and by the Swiss State Secretariat for Education, Research,
and Innovation under contract no. 15.0268. This support does not imply
endorsement.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor='RFC2119' target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='I-D.ietf-quic-transport'>
<front>
<title>QUIC: A UDP-Based Multiplexed and Secure Transport</title>

<author initials='J' surname='Iyengar' fullname='Janardhan Iyengar'>
    <organization />
</author>

<author initials='M' surname='Thomson' fullname='Martin Thomson'>
    <organization />
</author>

<date month='May' day='21' year='2017' />

<abstract><t>This document defines the core of the QUIC transport protocol.  This document describes connection establishment, packet format, multiplexing and reliability.  Accompanying documents describe the cryptographic handshake and loss detection.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-quic-transport-03' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-quic-transport-03.txt' />
</reference>



<reference anchor='I-D.ietf-quic-tls'>
<front>
<title>Using Transport Layer Security (TLS) to Secure QUIC</title>

<author initials='M' surname='Thomson' fullname='Martin Thomson'>
    <organization />
</author>

<author initials='S' surname='Turner' fullname='Sean Turner'>
    <organization />
</author>

<date month='May' day='21' year='2017' />

<abstract><t>This document describes how Transport Layer Security (TLS) is used to secure QUIC.  Note to Readers  Discussion of this draft takes place on the QUIC working group mailing list (quic@ietf.org), which is archived at https://mailarchive.ietf.org/arch/search/?email_list=quic .  Working Group information can be found at https://github.com/quicwg ; source code and issues list for this draft can be found at https://github.com/quicwg/base-drafts/labels/tls .</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-quic-tls-03' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-quic-tls-03.txt' />
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='I-D.ietf-quic-http'>
<front>
<title>Hypertext Transfer Protocol (HTTP) over QUIC</title>

<author initials='M' surname='Bishop' fullname='Mike Bishop'>
    <organization />
</author>

<date month='May' day='21' year='2017' />

<abstract><t>The QUIC transport protocol has several features that are desirable in a transport for HTTP, such as stream multiplexing, per-stream flow control, and low-latency connection establishment.  This document describes a mapping of HTTP semantics over QUIC.  This document also identifies HTTP/2 features that are subsumed by QUIC, and describes how HTTP/2 extensions can be ported to QUIC.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-quic-http-03' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-quic-http-03.txt' />
</reference>


<reference anchor="Trammell16" >
  <front>
    <title>Internet Path Transparency Measurements using RIPE Atlas (RIPE72 MAT presentation)</title>
    <author initials="B." surname="Trammell">
      <organization></organization>
    </author>
    <author initials="M." surname="Kuehlewind">
      <organization></organization>
    </author>
    <date year="2016" month="May" day="25"/>
  </front>
</reference>
<reference anchor="Edeline16" >
  <front>
    <title>Using UDP for Internet Transport Evolution (arXiv preprint 1612.07816)</title>
    <author initials="K." surname="Edeline">
      <organization></organization>
    </author>
    <author initials="M." surname="Kuehlewind">
      <organization></organization>
    </author>
    <author initials="B." surname="Trammell">
      <organization></organization>
    </author>
    <author initials="E." surname="Aben">
      <organization></organization>
    </author>
    <author initials="B." surname="Donnet">
      <organization></organization>
    </author>
    <date year="2016" month="December" day="22"/>
  </front>
</reference>
<reference anchor="Swett16" >
  <front>
    <title>QUIC Deployment Experience at Google (IETF96 QUIC BoF presentation)</title>
    <author initials="I." surname="Swett">
      <organization></organization>
    </author>
    <date year="2016" month="July" day="20"/>
  </front>
</reference>
<reference anchor="PaaschNanog" >
  <front>
    <title>Network Ssupport for TCP Fast Open (NANOG 67 presentation)</title>
    <author initials="C." surname="Paasch">
      <organization></organization>
    </author>
    <date year="2016" month="June" day="13"/>
  </front>
</reference>




<reference anchor='I-D.nottingham-httpbis-retry'>
<front>
<title>Retrying HTTP Requests</title>

<author initials='M' surname='Nottingham' fullname='Mark Nottingham'>
    <organization />
</author>

<date month='February' day='1' year='2017' />

<abstract><t>HTTP allows requests to be automatically retried under certain circumstances.  This draft explores how this is implemented, requirements for similar functionality from other parts of the stack, and potential future improvements.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-nottingham-httpbis-retry-01' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-nottingham-httpbis-retry-01.txt' />
</reference>




    </references>



  </back>
</rfc>

